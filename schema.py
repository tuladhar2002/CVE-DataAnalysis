from datetime import datetime
import json
import os
import glob
from tqdm import tqdm
from pprint import pprint
import pandas as pd
import matplotlib.pyplot as plt

data = []

def process_json_file(file_path):
   global data
   with open(file_path, "r") as f:
       data.append(json.load(f))

for name in tqdm(glob.glob("raw/**/**/*.json", recursive=True)):
   process_json_file(name)#

filtered = []

for it in data:
   try:
       vendor = it["containers"]["cna"]["affected"][0]["vendor"]
       if vendor in ["fortinet", "Fortinet"]:
           filtered.append(it)
   except:
       continue#

del data
pprint(filtered[0:5])
scored = []

for it in filtered:
   cve_id = it['cveMetadata']['cveId']
   try:
       base_score = it['containers']['cna']['metrics'][0]['cvssV3_1']['baseScore']
       problem_name = it['containers']['cna']['problemTypes'][0]['descriptions'][0]['description']
       product = it["containers"]["cna"]["affected"][0]["product"]
       published = datetime.fromisoformat(it['cveMetadata']['datePublished']).date().isoformat()
       if float(base_score) > 6.5:
           print(f"{cve_id}: {base_score}")
           scored.append({
               "cveId": cve_id,
               "baseScore": base_score,
               "product": product,
               "problem": problem_name,
               "published": published
           })
   except Exception as e:
       print(f"Failed to extract info from {cve_id}")
       continue

with open("scored.json", "w") as fp:
   json.dump(scored, fp)

with open("scored.json") as fp:
    scored = json.load(fp)

df = pd.DataFrame(scored)

# Extract year and month and create a new column
df['published'] = pd.to_datetime(df['published'], errors='coerce')
df['year_month'] = df['published'].dt.to_period('M')

# Group by year_month and get count of CVEs
grouped_by_date = df.groupby('year_month').size()
grouped_by_product = df.groupby('product').size()

# Plot data
fig, ax = plt.subplots(nrows=2, figsize=(12, 12))

grouped_by_date.plot(kind='bar', ax=ax[0])
ax[0].set_title('Number of CVEs published per month')
ax[0].set_xlabel('Month')
ax[0].set_ylabel('Number of CVEs')

grouped_by_product.plot(kind='bar', ax=ax[1])
ax[1].set_title('Number of CVEs per product')
ax[1].set_xlabel('Product')
ax[1].set_ylabel('Number of CVEs')

plt.tight_layout()
plt.show()
